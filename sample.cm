import function_name from script.sh

let files: list<string> = `ls *.c`;
let libs: list<string> = ["pthread", "libxml2"];
let pkg_args: string = `pkg-config --cflags --libs %{libs}`;

`gcc ${pkg_args} ${files}`;

let output_lines: list<string> = ```sh
ls -l | grep "criteria" | wc -l
```

let some_bash_script = ```bash
# initialize a variable
count=0

# loop through a sequence of numbers
for i in {1..5}; do
  # check if the current number is even
  if (( i % 2 == 0 )); then
    echo "$i is even"
  else
    echo "$i is odd"
  fi
 :q 
  # increment the counter variable
  ((count++))
done

# print the final count
echo "Looped $count times"

```;
assert_eq(some_bash_script, ["1 is odd", "2 is even", "3 is odd", "4 is even", "5 is odd", "Looped 5 times"]);

fn test(i: int) -> int {
  i + 1
}

// lambda function
let test = \a, b => a + b;
let thing = 1.1 + 1.2;

fn add_one(thing: int | float) -> int | float {
    thing + 1
}

// if true statement
// true
if true {
  // do stuff
}

let test_command = `ls | grep 'hello there'`;

fn print_string(s: string) {
    println(s)
}

let thing: any = 1.25
// let arg: string = thing.try_into()
print_string(arg as string?)
(arg as string?) === (arg.try_into()?)
(arg as string!) === (arg.try_into().unwrap())

let err = Err("hello");
err! // panic the program
err? // pass it up a level, but with same restrictions in usage as rust

for item in ["hello", "how", "are", "you"] {
  println(item);
}

struct A {
  s: string,
  n: int,
}

impl A {
    fn a(s: string, n: int) {
        // do stuff
    }
}
